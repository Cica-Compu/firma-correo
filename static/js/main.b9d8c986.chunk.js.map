import {
  Box,
  Button,
  Container,
  FormControl,
  InputLabel,
  MenuItem,
  TextField,
  Typography,
} from "@material-ui/core";
import Grid from "@material-ui/core/Grid";
import Paper from "@material-ui/core/Paper";
import { Theme, createStyles, makeStyles } from "@material-ui/core/styles";
import { CheckOutlined, FileCopyOutlined } from "@material-ui/icons";
import { Select, SelectChangeEvent } from "@mui/material";
import React from "react";
import "./App.css";
import ReactDOMServer from "react-dom/server";
import DownloadIcon from "@mui/icons-material/Download";
import CircularProgressWithLabel from "./CircularProgressWithLabel"; // 
import Signature from "./Signature"; // 

const useStyles = makeStyles((theme: Theme) =>
  // Styles for the web app
  createStyles({
    root: {
      "& .MuiTextField-root": {
        margin: theme.spacing(1), // 
      },
      "& .label-root": {
        margin: theme.spacing(1), // 
      },
    },
    paper: {
      padding: theme.spacing(2), // 
      textAlign: "left", // 
      color: theme.palette.text.secondary, // 
    },
    centeredImage: {
      display: "block", // 
      marginLeft: "auto", // 
      marginRight: "auto", // 
      marginTop: "1rem", // 
      width: "150px", // 
    },
    centeredText: {
      textAlign: "center", // 
    },
    warningIconStyle: {
      textAlign: "center", // 
      color: "#FFDC00", // 
      verticalAlign: "middle", // 
    },
    box: {
      width: "75%", // 
    },
    inputLabel: {
      marginLeft: 10, // 
      marginTop: 3, // 
    },
    select: {
      width: 250, // 
      height: 50, // 
      marginLeft: 0.7, // 
    },
  })
);

export const LOGOS = {
  "cica-horizontal": "cica-logo-vertical.png", // Se mantiene cica-logo-vertical.png por ser la única opción válida restante
  // "CICA-logo": "cica-logo-arbol.png" // Eliminado según la solicitud
} as const;

export interface PhotoSignatureProps {
  logo: keyof typeof LOGOS; // 
  fullName: string; // 
  credentials: string; // 
  title: string; // 
  phone: string; // 
  mobile: string; // 
  email: string; // 
}

interface State extends PhotoSignatureProps {
  copied: boolean; // 
}

const initialState: State = {
  logo: "cica-horizontal", // Se establece por defecto a la opción restante
  fullName: "", // 
  credentials: "", // 
  title: "", // 
  phone: "", // 
  mobile: "", // 
  email: "", // 
  copied: false, // 
};

function App() {
  const classes = useStyles();
  const [state, setState] = React.useState<State>(initialState); // 

  const hasRequiredFields: boolean =
    !!state.logo && !!state.fullName && !!state.title && !!state.phone; // 

  React.useEffect(() => {
    setState(initialState); // 
  }, []);

  const handleChange = (event: React.ChangeEvent<HTMLInputElement>) => {
    setState((prevState) => ({
      ...prevState, // 
      [event.target.name]: event.target.value, // 
    }));
  };

  const handleChangeLogo = (
    event: SelectChangeEvent<"cica-horizontal"> // Se ajusta el tipo a la única opción restante
  ) => {
    setState((prevState) => ({
      ...prevState, // 
      [event.target.name]: event.target.value, // 
    }));
  };

  //signature will not show in the preview until the first bit of data is added
  const showSignature = () => {
    let progress = 0;

    if (state.fullName) {
      return (
        <React.Fragment>
          <Signature
            [cite_start]logo={state.logo} // [cite: 23]
            [cite_start]credentials={state.credentials} // [cite: 23]
            [cite_start]fullName={state.fullName} // [cite: 23]
            [cite_start]title={state.title} // [cite: 23]
            [cite_start]phone={state.phone} // [cite: 23]
            [cite_start]mobile={state.mobile} // [cite: 23]
            [cite_start]email={state.email} // [cite: 23]
          />
          <br />

          <Button
            [cite_start]onClick={copyToClipboard} // [cite: 24]
            [cite_start]disabled={!hasRequiredFields} // [cite: 24]
            endIcon={state.copied ? [cite_start]<CheckOutlined /> : <FileCopyOutlined />} // 
          >
            {state.copied ? "Copiado!" : "Copiar"} // 
          </Button>
          <Button
            [cite_start]endIcon={<DownloadIcon />} // 
            onClick={downloadHtmlFile} // 
            disabled={!hasRequiredFields} // 
          >
            Descargar archivo HTML // 
          </Button>
        </React.Fragment>
      );
    }
    if (progress > 0) {
      return (
        <div className={classes.centeredText}>
          <CircularProgressWithLabel variant="determinate" value={progress} />{" "}
          {/*  */}
        </div>
      );
    } else {
      return <div>Por favor ingrese sus datos</div>; // 
    }
  };

  const copyToClipboard = () => {
    let copyText = document.querySelector(".signature"); // 
    const range = document.createRange(); // 
    if (copyText) {
      range.selectNode(copyText); // 
    }
    const windowSelection = window.getSelection(); // 
    if (windowSelection) {
      windowSelection.removeAllRanges(); // 
      windowSelection.addRange(range); // 
    }
    try {
      let successful = document.execCommand("copy"); // 
      console.log(successful ? "Success" : "Fail"); // 
      setState((prevState) => ({
        ...prevState, // 
        copied: true, // 
      }));
    } catch (err) {
      console.log("Fail"); // 
    }
  };

  const downloadHtmlFile = () => {
    const htmlSignature = ReactDOMServer.renderToStaticMarkup(
      <Signature
        [cite_start]logo={state.logo} // [cite: 29]
        [cite_start]fullName={state.fullName} // [cite: 29]
        [cite_start]credentials={state.credentials} // [cite: 29]
        [cite_start]title={state.title} // [cite: 29]
        [cite_start]phone={state.phone} // [cite: 29]
        [cite_start]mobile={state.mobile} // [cite: 29]
        [cite_start]email={state.email} // [cite: 29]
      />
    );
    const lowerCaseName = state.fullName.toLowerCase(); // 
    const nameSplit = lowerCaseName.split(" "); // 
    const firstInitial = nameSplit[0].charAt(0); // 
    const lastName = nameSplit[1]; // 
    const blob = new Blob([htmlSignature]); // 
    const fileDownloadUrl = URL.createObjectURL(blob); // 
    const link = document.createElement("a"); // 
    link.href = fileDownloadUrl; // 
    link.setAttribute("download", `${firstInitial}${lastName}.htm`); // 
    document.body.appendChild(link); // 
    link.click(); // 
    link.parentNode?.removeChild(link); // 
  };

  const isStateChanged = () => {
    return JSON.stringify(state) === JSON.stringify(initialState); // 
  };

  const clearState = () => {
    setState(initialState); // 
  };

  return (
    <Container>
      <img
        [cite_start]className={classes.centeredImage} // [cite: 31]
        [cite_start]src={"cica-logo-vertical.png"} // [cite: 31]
        [cite_start]alt={"cica-logo"} // [cite: 31]
      />
      <Typography variant="h2" gutterBottom className={classes.centeredText}>
        Generador de firmas CICA // 
      </Typography>
      <Typography
        variant="subtitle1"
        gutterBottom
        [cite_start]className={classes.centeredText} // [cite: 31]
      ></Typography>
      <Grid container spacing={3}>
        <Grid item xs={6}>
          <Paper className={classes.paper}>
            <form className={classes.root} noValidate autoComplete="off">
              <Box className={classes.box}>
                <p>
                  Por favor, rellene el formulario con sus datos personales para
                  completar el formato de firma. //  Luego, haga clic
                  en el botón copiar, o bien, descargue el archivo HTML para
                  ser colocado y pegado en su servicio de correo preferido. // 
                </p>
                <FormControl fullWidth>
                  <InputLabel
                    [cite_start]className={classes.inputLabel} // [cite: 33]
                    [cite_start]required // [cite: 34]
                    [cite_start]id="logo-select" // [cite: 34]
                  >
                    Seleccione el logo // 
                  </InputLabel>
                  <Select
                    [cite_start]className={classes.select} // [cite: 35]
                    [cite_start]value={state.logo} // [cite: 35]
                    [cite_start]placeholder="Select a Logo" // [cite: 35]
                    [cite_start]name="logo" // [cite: 35]
                    [cite_start]onChange={handleChangeLogo} // [cite: 35]
                  >
                    <MenuItem value={LOGOS["cica-horizontal"]}>
                      CICA Horizontal // 
                    </MenuItem>
                    {/* Se eliminó el MenuItem para "CICA-logo" */}
                  </Select>
                </FormControl>
              </Box>
              <TextField
                [cite_start]fullWidth={true} // [cite: 38]
                [cite_start]required // [cite: 38]
                [cite_start]label="Nombre completo" // [cite: 38]
                [cite_start]value={state.fullName} // [cite: 38]
                [cite_start]name={"fullName"} // [cite: 38]
                [cite_start]onChange={handleChange} // [cite: 39]
                // autoFocus={true}
              />
              <TextField
                [cite_start]fullWidth={true} // [cite: 39]
                [cite_start]label="Grado académico (siglas)" // [cite: 39]
                [cite_start]value={state.credentials} // [cite: 40]
                [cite_start]name={"credentials"} // [cite: 40]
                [cite_start]onChange={handleChange} // [cite: 40]
              />
              <TextField
                [cite_start]fullWidth={true} // [cite: 40]
                [cite_start]required // [cite: 41]
                [cite_start]label="Cargo o título" // [cite: 41]
                [cite_start]value={state.title} // [cite: 41]
                [cite_start]name={"title"} // [cite: 41]
                [cite_start]onChange={handleChange} // [cite: 41]
              />
              <TextField
                [cite_start]fullWidth={true} // [cite: 41]
                [cite_start]required // [cite: 42]
                [cite_start]label="Teléfono" // [cite: 42]
                [cite_start]placeholder="+506 2511-8200" // [cite: 42]
                [cite_start]value={state.phone} // [cite: 42]
                [cite_start]name={"phone"} // [cite: 42]
                [cite_start]onChange={handleChange} // [cite: 42]
              />
              <TextField
                [cite_start]fullWidth={true} // [cite: 43]
                [cite_start]label="Mobile Phone" // [cite: 43]
                [cite_start]placeholder="+506 8888-8888" // [cite: 43]
                [cite_start]value={state.mobile} // [cite: 43]
                [cite_start]name={"mobile"} // [cite: 44]
                [cite_start]onChange={handleChange} // [cite: 44]
              />
              <TextField
                [cite_start]fullWidth={true} // [cite: 44]
                [cite_start]label="Correo electrónico" // [cite: 44]
                [cite_start]placeholder="correo@ucr.ac.cr" // [cite: 44]
                [cite_start]value={state.email} // [cite: 45]
                [cite_start]name={"email"} // [cite: 45]
                [cite_start]onChange={handleChange} // [cite: 45]
              />
              <br />
              <Button
                [cite_start]disabled={isStateChanged()} // [cite: 46]
                [cite_start]onClick={clearState} // [cite: 46]
                [cite_start]color={"secondary"} // [cite: 46]
              >
                Limpiar // 
              </Button>
            </form>
          </Paper>
        </Grid>
        <Grid item xs={6}>
          <Paper className={classes.paper}>{showSignature()}</Paper>{" "}
          {/*  */}
        </Grid>
      </Grid>
    </Container>
  );
}

export default App;
